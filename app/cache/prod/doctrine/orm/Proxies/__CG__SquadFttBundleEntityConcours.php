<?php

namespace Proxies\__CG__\Squad\FttBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Concours extends \Squad\FttBundle\Entity\Concours implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'idConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'libelleConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'dateDebutConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'lieuConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'descriptionConcours', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'fraisParticipation', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'dateDebutDepot', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'dateFinDepot', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'typeConcour'];
        }

        return ['__isInitialized__', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'idConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'libelleConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'dateDebutConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'lieuConcour', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'descriptionConcours', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'fraisParticipation', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'dateDebutDepot', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'dateFinDepot', '' . "\0" . 'Squad\\FttBundle\\Entity\\Concours' . "\0" . 'typeConcour'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Concours $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdConcour()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdConcour();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdConcour', []);

        return parent::getIdConcour();
    }

    /**
     * {@inheritDoc}
     */
    public function setLibelleConcour($libelleConcour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLibelleConcour', [$libelleConcour]);

        return parent::setLibelleConcour($libelleConcour);
    }

    /**
     * {@inheritDoc}
     */
    public function getLibelleConcour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLibelleConcour', []);

        return parent::getLibelleConcour();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDebutConcour($dateDebutConcour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDebutConcour', [$dateDebutConcour]);

        return parent::setDateDebutConcour($dateDebutConcour);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDebutConcour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDebutConcour', []);

        return parent::getDateDebutConcour();
    }

    /**
     * {@inheritDoc}
     */
    public function setLieuConcour($lieuConcour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLieuConcour', [$lieuConcour]);

        return parent::setLieuConcour($lieuConcour);
    }

    /**
     * {@inheritDoc}
     */
    public function getLieuConcour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLieuConcour', []);

        return parent::getLieuConcour();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescriptionConcours($descriptionConcours)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescriptionConcours', [$descriptionConcours]);

        return parent::setDescriptionConcours($descriptionConcours);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescriptionConcours()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescriptionConcours', []);

        return parent::getDescriptionConcours();
    }

    /**
     * {@inheritDoc}
     */
    public function setFraisParticipation($fraisParticipation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFraisParticipation', [$fraisParticipation]);

        return parent::setFraisParticipation($fraisParticipation);
    }

    /**
     * {@inheritDoc}
     */
    public function getFraisParticipation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFraisParticipation', []);

        return parent::getFraisParticipation();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateDebutDepot($dateDebutDepot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateDebutDepot', [$dateDebutDepot]);

        return parent::setDateDebutDepot($dateDebutDepot);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateDebutDepot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateDebutDepot', []);

        return parent::getDateDebutDepot();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFinDepot($dateFinDepot)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFinDepot', [$dateFinDepot]);

        return parent::setDateFinDepot($dateFinDepot);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFinDepot()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFinDepot', []);

        return parent::getDateFinDepot();
    }

    /**
     * {@inheritDoc}
     */
    public function setTypeConcour($typeConcour)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTypeConcour', [$typeConcour]);

        return parent::setTypeConcour($typeConcour);
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeConcour()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeConcour', []);

        return parent::getTypeConcour();
    }

}
